name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

# Make sure CI fails on all warnings, including Clippy lints
env:
  RUSTFLAGS: "-Dwarnings"
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

jobs:
  # Fast initial testing job to fail early if tests don't pass
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4

      - name: Install uv with cache
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.6.15"
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
          python-version: ${{ matrix.python-version }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          shared-key: "build-cache-${{ runner.os }}"

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.7

      - name: Install dependencies
        run: |
          uv pip install pytest
          uv pip install -e .

      - name: Run tests
        run: uv run pytest tests -v

  # Test with minimum supported Polars version
  min-versions-test:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    steps:
      - uses: actions/checkout@v4

      - name: Install uv with cache
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.6.15"
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
          python-version: "3.9"

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.7

      - name: Install with minimum dependencies
        run: |
          uv pip install polars==1.3.0  # min version
          uv pip install pytest
          uv pip install -e .

      - name: Run tests with minimum versions
        run: uv run pytest tests -v

  # Build wheels for all platforms in parallel
  build-wheels:
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-22.04
            target: x86_64
            python: "3.9"
            manylinux: auto
          - os: ubuntu-22.04
            target: aarch64
            python: "3.9"
            manylinux: auto

          # macOS builds
          - os: macos-13
            target: x86_64
            python: "3.9"
          - os: macos-14
            target: aarch64
            python: "3.9"

          # Windows builds
          - os: windows-latest
            target: x64
            python: "3.9"

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install uv with cache
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.6.15"
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
          python-version: ${{ matrix.python }}

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.7

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
          sccache: "true"
          manylinux: ${{ matrix.manylinux || 'off' }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ runner.os }}-${{ matrix.target }}
          path: dist
          compression-level: 9

  # Build source distribution
  sdist:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist
          compression-level: 9

  # Release to PyPI and GitHub
  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [build-wheels, sdist, min-versions-test]
    environment: pypi
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "dist/**/*"

      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing dist/*
